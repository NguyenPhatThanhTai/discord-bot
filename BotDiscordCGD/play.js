const Discord = require("discord.js")
var express = require("express");
var app = express();
const ytdl = require("ytdl-core");
const ytSearch = require("yt-search");
const { Client, Intents } = require('discord.js')
const config = require("./config.json")
const client = new Discord.Client({ intents: [Intents.FLAGS.GUILDS] })

const prefix = '-';
const queue = new Map();
var index = 0;
var songInfo = null;
var dispatcher;
var song;
var stopMusic = false;

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Our app is running on port ${ PORT }`);
});

client.once("ready", () => {
    console.log(`Logged in as ${client.user.tag}!`)
})

client.on('message', async message => {
    if (!message.content.startsWith(prefix) || message.author.bot) return;

    const serverQueue = queue.get(message.guild.id);

    const args = message.content.trim().split(/ +/g);
    const command = args[0].slice(prefix.length).toLowerCase();

    if (command === "nghegido") {
        var ds_lenh = ["-ph√°t: ph√°t + url b√†i h√°t ho·∫∑c t√™n b√†i h√°t!", "-ti·∫øp: ti·∫øp theo trong danh s√°ch b√†i h√°t!", "-d·ª´ng: d·ª´ng b√†i h√°t hi·ªán t·∫°i!", "-ds: danh s√°ch c√°c b√†i h√°t ƒë√£ th√™m ho·∫∑c ds + 1 s·ªë trong danh s√°ch c√°c b√†i h√°t ƒë√£ th√™m, vd: ds 1!", "-bye: bye nghe g√¨ ƒë√≥!"]
        const list_send = ds_lenh.map((item, i) => `${i + 1}. ${item}`).join("\r\n")
        message.channel.send({
            embed: {
                title: 'üéµ Danh s√°ch c√°c l·ªánh cho BOT-Nh·∫°c Nghe G√¨ ƒê√≥!!! üéµ',
                description: list_send,
                image: { url: 'https://media.discordapp.net/attachments/853096933462769740/871728272596156436/Logo-Sau.png?width=968&height=645' }
            }
        })
    } else if (command === "ph√°t") {
        if (!args[1]) return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: 'H√£y ƒë·ªÉ l·∫°i 1 URL ho·∫∑c t√™n 1 b√†i h√°t!',
            }
        })
        execute(message, serverQueue);
        return;
    } else if (command === "ti·∫øp") {
        skip(message, serverQueue);
        return;
    } else if (command === "d·ª´ng") {
        stop(message, serverQueue);
        return;
    } else if (command === "ds") {
        if (args[1]) {
            playInList(message, serverQueue, args[1])
            return;
        } else {
            list(message, serverQueue)
            return;
        }
    } else if (command === "lui") {
        previous(message, serverQueue)
        return;
    } else if (command === "bye") {
        leave(message, serverQueue)
        return;
    }
})

async function execute(message, serverQueue) {
    const args = message.content.split(" ");

    const voiceChannel = message.member.voice.channel;
    if (!voiceChannel)
        return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è C√≥ g√¨ ƒë√≥ kh√¥ng ƒë√∫ng - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: 'B·∫°n c·∫ßn ·ªü trong m·ªôt k√™nh √¢m thanh ƒë·ªÉ t√¥i c√≥ th·ªÉ ph√°t nh·∫°c!'
            }
        });
    const permissions = voiceChannel.permissionsFor(message.client.user);
    if (!permissions.has("CONNECT") || !permissions.has("SPEAK")) {
        return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è C√≥ g√¨ ƒë√≥ kh√¥ng ƒë√∫ng - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: 'T√¥i c·∫ßn c√≥ quy·ªÅn n√≥i ƒë·ªÉ c√≥ th·ªÉ ph√°t nh·∫°c, vui l√≤ng c·∫•p quy·ªÅn cho t√¥i v√† th·ª≠ l·∫°i!'
            }
        });
    }

    try {
        if (ytdl.validateURL(args[1])) {
            songInfo = await ytdl.getInfo(args[1]);
            song = {
                title: songInfo.videoDetails.title,
                url: songInfo.videoDetails.video_url,
            };
        } else {
            message.channel.send({
                embed: {
                    title: 'üîé ƒêang t√¨m - Nghe G√¨ ƒê√≥!!! üîé',
                    description: `ƒêang t√¨m b√†i h√°t **${args.join(' ').replace('-ph√°t', '')}** cho b·∫°n! üîé`
                }
            });
            const video_finder = async(query) => {
                const videoResult = await ytSearch(query);
                return (videoResult.videos.length > 1) ? videoResult.videos[0] : null;
            }

            console.log(args.join(' ').replace('-ph√°t', ''));
            const video = await video_finder(args.join(' ').replace('-ph√°t', ''));
            if (video) {
                song = {
                    title: video.title,
                    url: video.url,
                };
            } else {
                message.channel.send({
                    embed: {
                        title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                        description: `B√†i h√°t **${args.join(' ').replace('-ph√°t', '')}** m√† b·∫°n y√™u c·∫ßu kh√¥ng th·ªÉ t√¨m th·∫•y!`
                    }
                });
            }
        }
    } catch (err) {
        console.log(err);
        return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: `B√†i h√°t **${args.join(' ').replace('-ph√°t', '')}** m√† b·∫°n y√™u c·∫ßu kh√¥ng th·ªÉ t√¨m th·∫•y!`
            }
        });
    }


    if (!serverQueue) {
        const queueContruct = {
            textChannel: message.channel,
            voiceChannel: voiceChannel,
            connection: null,
            songs: [],
            volume: 5,
            playing: true
        };

        queue.set(message.guild.id, queueContruct);

        queueContruct.songs.push(song);

        //ƒê·ª£i bot n√≥ join v√¥ ph√≤ng
        try {
            var connection = await voiceChannel.join();
            queueContruct.connection = connection;
            play(message.guild, queueContruct.songs[0]);
        } catch (err) {
            console.log(err);
            queue.delete(message.guild.id);
            return message.channel.send({
                embed: {
                    title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                    description: `Kh√¥ng th·ªÉ ph√°t b√†i h√°t ${song.title}!`
                }
            });
        }
    } else {
        serverQueue.songs.push(song);
        return message.channel.send({
            embed: {
                title: 'üéµ Th√¥ng tin - Nghe G√¨ ƒê√≥!!! üéµ',
                description: `ƒê√£ th√™m b√†i h√°t ${song.title} v√†o danh s√°ch ƒë·ª£i!`
            }
        });
    }
}

function skip(message, serverQueue) {
    if (!message.member.voice.channel)
        return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: `B·∫°n c·∫ßn ·ªü trong m·ªôt k√™nh √¢m thanh ƒë·ªÉ ti·∫øp t·ª•c ph√°t b√†i h√°t!`
            }
        });
    if (stopMusic) {
        play(message.guild, serverQueue.songs[index]);
        stopMusic = false;
    } else {
        index += 1;
        console.log(index);
        if (!message.member.voice.channel)
            return message.channel.send({
                embed: {
                    title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                    description: `B·∫°n c·∫ßn ·ªü trong m·ªôt k√™nh √¢m thanh ƒë·ªÉ b·ªè qua b√†i h√°t!`
                }
            });
        if (!serverQueue)
            return message.channel.send({
                embed: {
                    title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                    description: `Hi·ªán t·∫°i kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!`
                }
            });
        if (serverQueue.songs[index] == null) {
            index -= 1;
            return message.channel.send({
                embed: {
                    title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                    description: `Kh√¥ng c√≥ b√†i h√°t n√†o ti·∫øp theo trong danh s√°ch!`
                }
            });
        } else {
            play(message.guild, serverQueue.songs[index]);
        }
    }
}

function previous(message, serverQueue) {
    if (index == 0) {
        index = 0;
    } else {
        index -= 1;
    }
    console.log(index);
    if (!message.member.voice.channel)
        return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: `B·∫°n c·∫ßn ·ªü trong m·ªôt k√™nh √¢m thanh ƒë·ªÉ tr·ªü v·ªÅ b√†i h√°t tr∆∞·ªõc!`
            }
        });
    if (!serverQueue)
        return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: `B·∫°n c·∫ßn ·ªü trong m·ªôt k√™nh √¢m thanh ƒë·ªÉ tr·ªü v·ªÅ b√†i h√°t tr∆∞·ªõc!`
            }
        });
    if (serverQueue.songs[index] == null) {
        return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: `Kh√¥ng c√≥ b√†i h√°t n√†o tr∆∞·ªõc ƒë√≥ trong danh s√°ch!`
            }
        });
    } else {
        play(message.guild, serverQueue.songs[index]);
    }
}

function stop(message, serverQueue) {
    if (!message.member.voice.channel)
        return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: `B·∫°n c·∫ßn ·ªü trong m·ªôt k√™nh √¢m thanh ƒë·ªÉ d·ª´ng b√†i h√°t!`
            }
        });

    if (!serverQueue)
        return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: `kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ d·ª´ng!`
            }
        });

    stopMusic = true;
    dispatcher.pause();
}

function leave(message, serverQueue) {
    message.channel.send({
        embed: {
            title: 'üé∂ T·∫°m bi·ªát - Nghe G√¨ ƒê√≥!!! üé∂',
            description: `T·∫°m bi·ªát b·∫°n - OUT!`
        }
    });
    return message.member.voice.channel.leave();
}

function list(message, serverQueue) {
    if (serverQueue == null) {
        return message.channel.send({
            embed: {
                title: 'üéµ Danh s√°ch c√°c b√†i h√°t ƒë√£ th√™m! üéµ',
                description: `Hi·ªán t·∫°i b·∫°n ch∆∞a th√™m b√†i h√°t n√†o!`
            }
        });
    } else {
        const list_send = serverQueue.songs.map((item, i) => `${ i + 1 }.${ item.title}`).join("\r\n")
        return message.channel.send({
            embed: {
                title: 'üéµ Danh s√°ch c√°c b√†i h√°t ƒë√£ th√™m! üéµ',
                description: list_send
            }
        });
    }
}

function playInList(message, serverQueue, indexList) {
    var indexNumber = indexList - 1;
    if (!message.member.voice.channel)
        return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: `B·∫°n c·∫ßn ·ªü trong m·ªôt k√™nh √¢m thanh ƒë·ªÉ d·ª´ng b√†i h√°t!`
            }
        });

    if (serverQueue == null || indexNumber >= serverQueue.songs.length)
        return message.channel.send({
            embed: {
                title: '‚ö†Ô∏è L·ªói - Nghe G√¨ ƒê√≥!!! ‚ö†Ô∏è',
                description: `Danh s√°ch tr·ªëng ho·∫∑c s·ªë b√†i h√°t kh√¥ng h·ª£p l·ªá!`
            }
        });
    play(message.guild, serverQueue.songs[indexNumber]);
}

function play(guild, song) {
    const serverQueue = queue.get(guild.id);
    if (!song) {
        serverQueue.voiceChannel.leave();
        queue.delete(guild.id);
        return;
    }

    dispatcher = serverQueue.connection
        .play(ytdl(song.url, { highWaterMark: 1 << 25 }))
        .on("finish", () => {
            serverQueue.songs.shift();
            play(guild, serverQueue.songs[0]);
        })
        .on("error", error => console.error(error));
    dispatcher.setVolumeLogarithmic(serverQueue.volume / 5);
    serverQueue.textChannel.send({
        embed: {
            title: 'üé∂ ƒêang ph√°t - Nghe G√¨ ƒê√≥! üé∂',
            description: `ƒêang ph√°t: ** ${ song.title }**`
        }
    });
}

client.login(config.TOKEN)